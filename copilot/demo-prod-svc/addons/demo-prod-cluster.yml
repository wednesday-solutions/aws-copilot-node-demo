Parameters:
  App:
    Type: String
    Description: Your application's name.
  Env:
    Type: String
    Description: The environment name your service, job, or workflow is being deployed to.
  Name:
    Type: String
    Description: The name of the service, job, or workflow being deployed.
  # Customize your Aurora Serverless cluster by setting the default value of the following parameters.
  demoprodclusterDBName:
    Type: String
    Description: The name of the initial database to be created in the DB cluster.
    Default: demo_prod_db
    # Cannot have special characters
    # Naming constraints: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Limits.html#RDS_Limits.Constraints
  demoprodclusterDBAutoPauseSeconds:
    Type: Number
    Description: The duration in seconds before the cluster pauses.
    Default: 1000
Mappings:
  demoprodclusterEnvScalingConfigurationMap:
    qa:
      'DBMinCapacity': 2 # AllowedValues: [2, 4, 8, 16, 32, 64, 192, 384]
      'DBMaxCapacity': 8 # AllowedValues: [2, 4, 8, 16, 32, 64, 192, 384]

    prod:
      'DBMinCapacity': 2 # AllowedValues: [2, 4, 8, 16, 32, 64, 192, 384]
      'DBMaxCapacity': 8 # AllowedValues: [2, 4, 8, 16, 32, 64, 192, 384]

    dev:
      'DBMinCapacity': 2 # AllowedValues: [2, 4, 8, 16, 32, 64, 192, 384]
      'DBMaxCapacity': 8 # AllowedValues: [2, 4, 8, 16, 32, 64, 192, 384]

    demo:
      'DBMinCapacity': 2 # AllowedValues: [2, 4, 8, 16, 32, 64, 192, 384]
      'DBMaxCapacity': 8 # AllowedValues: [2, 4, 8, 16, 32, 64, 192, 384]

    All:
      'DBMinCapacity': 2 # AllowedValues: [2, 4, 8, 16, 32, 64, 192, 384]
      'DBMaxCapacity': 8 # AllowedValues: [2, 4, 8, 16, 32, 64, 192, 384]

Resources:
  demoprodclusterDBSubnetGroup:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Group of Copilot private subnets for Aurora cluster.
      SubnetIds: !Split [',', { 'Fn::ImportValue': !Sub '${App}-${Env}-PrivateSubnets' }]
  demoprodclusterSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group for your workload to access the DB cluster demoprodcluster'
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: !Sub 'The Security Group for ${Name} to access DB cluster demoprodcluster.'
      VpcId:
        Fn::ImportValue: !Sub '${App}-${Env}-VpcId'
      Tags:
        - Key: Name
          Value: !Sub 'copilot-${App}-${Env}-${Name}-Aurora'
  demoprodclusterDBClusterSecurityGroup:
    Metadata:
      'aws:copilot:description': 'A security group for your DB cluster demoprodcluster'
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: The Security Group for the database cluster.
      SecurityGroupIngress:
        - ToPort: 5432
          FromPort: 5432
          IpProtocol: tcp
          Description: !Sub 'From the Aurora Security Group of the workload ${Name}.'
          SourceSecurityGroupId: !Ref demoprodclusterSecurityGroup
      VpcId:
        Fn::ImportValue: !Sub '${App}-${Env}-VpcId'
  demoprodclusterAuroraSecret:
    Metadata:
      'aws:copilot:description': 'A Secrets Manager secret to store your DB credentials'
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub Aurora main user secret for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate: '{"username": "postgres"}'
        GenerateStringKey: 'password'
        ExcludePunctuation: true
        IncludeSpace: false
        PasswordLength: 16
  demoprodclusterDBClusterParameterGroup:
    Metadata:
      'aws:copilot:description': 'A DB parameter group for engine configuration values'
    Type: 'AWS::RDS::DBClusterParameterGroup'
    Properties:
      Description: !Ref 'AWS::StackName'
      Family: 'aurora-postgresql10'
      Parameters:
        client_encoding: 'UTF8'
  demoprodclusterDBCluster:
    Metadata:
      'aws:copilot:description': 'The demoprodcluster Aurora Serverless database cluster'
    Type: 'AWS::RDS::DBCluster'
    Properties:
      MasterUsername:
        !Join ['', ['{{resolve:secretsmanager:', !Ref demoprodclusterAuroraSecret, ':SecretString:username}}']]
      MasterUserPassword:
        !Join ['', ['{{resolve:secretsmanager:', !Ref demoprodclusterAuroraSecret, ':SecretString:password}}']]
      DatabaseName: !Ref demoprodclusterDBName
      Engine: 'aurora-postgresql'
      EngineVersion: '10.12'
      EngineMode: serverless
      DBClusterParameterGroupName: !Ref demoprodclusterDBClusterParameterGroup
      DBSubnetGroupName: !Ref demoprodclusterDBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref demoprodclusterDBClusterSecurityGroup
      ScalingConfiguration:
        AutoPause: true
        # Replace "All" below with "!Ref Env" to set different autoscaling limits per environment.
        MinCapacity: !FindInMap [demoprodclusterEnvScalingConfigurationMap, All, DBMinCapacity]
        MaxCapacity: !FindInMap [demoprodclusterEnvScalingConfigurationMap, All, DBMaxCapacity]
        SecondsUntilAutoPause: !Ref demoprodclusterDBAutoPauseSeconds
  demoprodclusterSecretAuroraClusterAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref demoprodclusterAuroraSecret
      TargetId: !Ref demoprodclusterDBCluster
      TargetType: AWS::RDS::DBCluster
  ElastiCacheSubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: 'ElastiCache Subnet'
      SubnetIds: !Split
        - ','
        - 'Fn::ImportValue': !Sub '${App}-${Env}-PrivateSubnets'
  ElastiCacheCluster:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      CacheSubnetGroupName: !Ref ElastiCacheSubnetGroup
      VpcSecurityGroupIds:
        - !Ref demoprodclusterSecurityGroup
      CacheNodeType: 'cache.t2.micro'
      Engine: 'redis'
      NumCacheNodes: 1

Outputs:
  demoprodclusterSecret: # injected as DEMOPRODCLUSTER_SECRET environment variable by Copilot.
    Description: "The JSON secret that holds the database username and password. Fields are 'host', 'port', 'dbname', 'username', 'password', 'dbClusterIdentifier' and 'engine'"
    Value: !Ref demoprodclusterAuroraSecret
  demoprodclusterSecurityGroup:
    Description: 'The security group to attach to the workload.'
    Value: !Ref demoprodclusterSecurityGroup
  cacheHost:
    Description: Cache host name
    Value: !GetAtt ElastiCacheCluster.RedisEndpoint.Address
  cachePort:
    Description: Cache host name
    Value: !GetAtt ElastiCacheCluster.RedisEndpoint.Port
